// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  isVerified    Boolean  @default(false)
  email          String   @unique
  passwordHash   String?
  role           Role?
  resetToken        String?  // Stores reset token
  resetTokenExpiry  DateTime?  // Token expiration time
  createdAt      DateTime @default(now())

  jobSeeker      JobSeeker?
  company        Company?
}

model JobSeeker {
  id            String   @id @default(uuid()) @map("id") @unique
  user          User     @relation(fields: [id], references: [id])
  resumeUrl     String?
  skills        String[]
  interests     String[]
  fullName      String
  shortBio      String

  applications  JobApplication[]
}

model Company {
  id          String   @id @default(uuid()) @map("id") @unique
  user        User     @relation(fields: [id], references: [id])
  fullName    String
  companyName String
  industry    String?
  website     String?
  roleInCompany String
  companyLogo String?

  jobs        Job[]
}

model Job {
  id               String     @id @default(uuid())
  companyId        String
  company          Company    @relation(fields: [companyId], references: [id])
  title            String
  description      String
  responsibilities String
  skillsRequired   String
  industry         String
  paidRole         PaidRole
  deadline         DateTime
  commitmenLevel   String
  location         String?
  jobType          JobType
  createdAt        DateTime   @default(now())

  applications     JobApplication[]
}


model JobApplication {
  id          String            @id @default(uuid())
  jobId       String
  job         Job               @relation(fields: [jobId], references: [id])
  jobSeekerId String
  jobSeeker   JobSeeker         @relation(fields: [jobSeekerId], references: [id])
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
}

enum Role {
  job_seeker
  startupFounder
}

enum PaidRole{
  UNPAID
  PAID
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}